"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVersion = getVersion;
const fs_1 = require("fs");
const path_1 = require("path");
let cachedVersion = null;
function getVersion() {
    if (cachedVersion) {
        return cachedVersion;
    }
    const versionPath = (0, path_1.join)(process.cwd(), 'dynamic-version.local.json');
    if (!(0, fs_1.existsSync)(versionPath)) {
        const errorMessage = `
╔════════════════════════════════════════════════════════════════╗
║                     VERSION FILE NOT FOUND                        ║
╠════════════════════════════════════════════════════════════════╣
║ The dynamic-version.local.json file is missing.                   ║
║                                                                    ║
║ This file should be automatically generated by git hooks.         ║
║                                                                    ║
║ To fix this issue:                                               ║
║                                                                    ║
║ 1. Install and run the version generator:                        ║
║    npx @justinhaaheim/version-manager --install                  ║
║                                                                    ║
║ 2. If you just cloned this repo, run:                           ║
║    npx @justinhaaheim/version-manager                            ║
║                                                                    ║
║ 3. Make sure *.local.json is in your .gitignore                 ║
║                                                                    ║
║ For more info:                                                   ║
║ https://github.com/justinhaaheim/version-manager                 ║
╚════════════════════════════════════════════════════════════════╝
`;
        console.error(errorMessage);
        return {
            branch: 'unknown',
            components: null,
            describe: '',
            dirty: false,
            error: true,
            humanReadable: 'VERSION ERROR - See console',
            timestamp: new Date().toISOString(),
            version: '0.0.0',
        };
    }
    try {
        const content = (0, fs_1.readFileSync)(versionPath, 'utf-8');
        const parsed = JSON.parse(content);
        cachedVersion = parsed;
        return parsed;
    }
    catch (error) {
        console.error('Failed to parse dynamic-version.local.json:', error);
        return {
            branch: 'unknown',
            components: null,
            describe: '',
            dirty: false,
            error: true,
            humanReadable: 'PARSE ERROR',
            timestamp: new Date().toISOString(),
            version: '0.0.0',
        };
    }
}
if (module?.hot) {
    module.hot.accept(() => {
        cachedVersion = null;
    });
}
//# sourceMappingURL=reader.js.map