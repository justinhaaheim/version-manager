import type {VersionInfo} from './types';

import {existsSync, readFileSync} from 'fs';
import {join} from 'path';

let cachedVersion: VersionInfo | null = null;

export function getVersion(): VersionInfo {
  if (cachedVersion) {
    return cachedVersion;
  }

  const versionPath = join(process.cwd(), 'dynamic-version.local.json');

  if (!existsSync(versionPath)) {
    const errorMessage = `
╔════════════════════════════════════════════════════════════════╗
║                     VERSION FILE NOT FOUND                        ║
╠════════════════════════════════════════════════════════════════╣
║ The dynamic-version.local.json file is missing.                   ║
║                                                                    ║
║ This file should be automatically generated by git hooks.         ║
║                                                                    ║
║ To fix this issue:                                               ║
║                                                                    ║
║ 1. Install and run the version generator:                        ║
║    npx @justinhaaheim/version-manager --install                  ║
║                                                                    ║
║ 2. If you just cloned this repo, run:                           ║
║    npx @justinhaaheim/version-manager                            ║
║                                                                    ║
║ 3. Make sure *.local.json is in your .gitignore                 ║
║                                                                    ║
║ For more info:                                                   ║
║ https://github.com/justinhaaheim/version-manager                 ║
╚════════════════════════════════════════════════════════════════╝
`;

    console.error(errorMessage);

    return {
      branch: 'unknown',
      components: null,
      describe: '',
      dirty: false,
      error: true,
      humanReadable: 'VERSION ERROR - See console',
      timestamp: new Date().toISOString(),
      version: '0.0.0',
    };
  }

  try {
    const content = readFileSync(versionPath, 'utf-8');
    const parsed = JSON.parse(content) as VersionInfo;
    cachedVersion = parsed;
    return parsed;
  } catch (error) {
    console.error('Failed to parse dynamic-version.local.json:', error);
    return {
      branch: 'unknown',
      components: null,
      describe: '',
      dirty: false,
      error: true,
      humanReadable: 'PARSE ERROR',
      timestamp: new Date().toISOString(),
      version: '0.0.0',
    };
  }
}

// Clear cache when module is hot-reloaded (for development)
// This is for webpack/vite hot module replacement
declare const module: {
  hot?: {
    accept: (callback: () => void) => void;
  };
};

if (module?.hot) {
  module.hot.accept(() => {
    cachedVersion = null;
  });
}
